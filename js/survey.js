document.addEventListener('DOMContentLoaded', () => {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ QR-–∫–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
	if (typeof qrcode === 'undefined') {
		console.error('QR code library not loaded');
		return;
	}
	console.log('QR code library loaded successfully');

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã
	const userTheme = localStorage.getItem('theme');
	const systemDarkTheme = window.matchMedia(
		'(prefers-color-scheme: dark)'
	).matches;

	// –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é
	if (!userTheme) {
		document.documentElement.setAttribute(
			'data-theme',
			systemDarkTheme ? 'dark' : 'light'
		);
	} else {
		document.documentElement.setAttribute('data-theme', userTheme);
	}

	const form = document.getElementById('survey-form');
	const steps = form.querySelectorAll('.survey-step');
	const nextBtn = document.getElementById('next-btn');
	const prevBtn = document.getElementById('prev-btn');
	const priceRange = document.getElementById('price-range');
	const priceDisplay = document.getElementById('price-display');

	let currentStep = 1;
	const totalSteps = steps.length;

	// –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ü–µ–Ω–∫–∏
	const ratingComments = {
		1: 'üò¢ –û–π...–æ—á–µ–Ω—å –∂–∞–ª—å!',
		2: 'üòï –î–∞, –µ—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å',
		3: 'ü§î –ü–æ–Ω—è—Ç–Ω–æ... –°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å',
		4: 'üòå –£–∂–µ –Ω–µ–ø–ª–æ—Ö–æ, –Ω–æ –º–æ–∂–Ω–æ –ª—É—á—à–µ',
		5: 'üôÇ –°–µ—Ä–µ–¥–∏–Ω–∞ –ø—É—Ç–∏',
		6: 'üòä –•–æ—Ä–æ—à–æ!',
		7: 'üòÉ –û—Ç–ª–∏—á–Ω–æ! –†–∞–¥, —á—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å',
		8: 'ü§© –í–∞—É! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É',
		9: 'üéâ –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ!',
		10: 'üöÄ –ü–æ—Ç—Ä—è—Å–∞—é—â–µ!!',
	};

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ü–µ–Ω–æ–∫
	const ratingInputs = document.querySelectorAll('input[name="rating"]');
	const ratingComment = document.querySelector('.rating-comment');

	if (ratingInputs.length && ratingComment) {
		ratingInputs.forEach(input => {
			input.addEventListener('change', e => {
				const rating = e.target.value;
				ratingComment.textContent = ratingComments[rating];
				ratingComment.classList.remove('show');
				// –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è
				setTimeout(() => {
					ratingComment.classList.add('show');
				}, 50);
			});
		});
	}

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–≤–æ–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ —Ñ—É–Ω–∫—Ü–∏–π
	const customFeatureCheckbox = document.getElementById(
		'custom-feature-checkbox'
	);
	const customFeatureInput = document.querySelector('.custom-feature-input');

	if (customFeatureCheckbox && customFeatureInput) {
		customFeatureCheckbox.addEventListener('change', e => {
			if (e.target.checked) {
				customFeatureInput.classList.remove('hidden');
				customFeatureInput.focus();
			} else {
				customFeatureInput.classList.add('hidden');
				customFeatureInput.value = '';
			}
		});

		// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ—á–∞–µ–º —á–µ–∫–±–æ–∫—Å –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞
		customFeatureInput.addEventListener('input', e => {
			if (e.target.value.length > 0 && !customFeatureCheckbox.checked) {
				customFeatureCheckbox.checked = true;
			}
		});
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ 1 (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ö—É—Ä–∫–æ–¥–∞)
	const handleStep1Response = value => {
		const message = document.createElement('p');
		message.style.textAlign = 'center';
		message.style.color = 'var(--button-primary)';
		message.style.marginTop = '1rem';
		message.style.fontWeight = '500';

		if (value === 'yes') {
			message.textContent = '–°—É–ø–µ—Ä! ';
		} else {
			message.textContent = '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ø—Ä–æ–±—É–π! ';
		}

		const currentStepElement = document.querySelector(
			`[data-step="${currentStep}"]`
		);
		const existingMessage = currentStepElement.querySelector('p');
		if (existingMessage) {
			existingMessage.remove();
		}
		currentStepElement.appendChild(message);

		// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã
		setTimeout(() => {
			nextStep();
		}, 1500);
	};

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–¥–∏–æ –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
	document.querySelectorAll('input[name="used_kurkod"]').forEach(radio => {
		radio.addEventListener('change', e => {
			handleStep1Response(e.target.value);
		});
	});

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
	if (priceRange && priceDisplay) {
		const priceValue = priceDisplay.parentElement;
		priceRange.addEventListener('input', e => {
			priceDisplay.textContent = e.target.value;
			// –î–æ–±–∞–≤–ª—è–µ–º –∏ —É–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
			priceValue.classList.remove('changed');
			void priceValue.offsetWidth; // –§–æ—Ä—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É
			priceValue.classList.add('changed');
		});
	}

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞
	const generateShareQR = () => {
		console.log('Starting QR code generation');
		const shareQRContainer = document.getElementById('share-qr');
		if (!shareQRContainer) {
			console.error('QR container not found');
			return;
		}
		console.log('Found QR container');

		try {
			// –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥ —Å –±–æ–ª—å—à–µ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π –æ—à–∏–±–æ–∫
			const qr = qrcode(0, 'H'); // H - highest error correction level (30%)
			qr.addData('https://kianurivzzz.github.io/kurkod/');
			qr.make();
			console.log('QR code created');

			// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π canvas –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è QR-–∫–æ–¥–∞ –∏ –ª–æ–≥–æ—Ç–∏–ø–∞
			const canvas = document.createElement('canvas');
			const qrSize = qr.getModuleCount();
			const scale = 20; // –£–≤–µ–ª–∏—á–∏–ª–∏ —Ä–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è —Å 10 –¥–æ 20
			const padding = Math.floor(scale * 0.75); // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏–π
			canvas.width = qrSize * scale + padding * 2;
			canvas.height = qrSize * scale + padding * 2;

			const ctx = canvas.getContext('2d');
			ctx.imageSmoothingEnabled = true;
			ctx.imageSmoothingQuality = 'high';
			console.log('Canvas created');

			// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç–∞ –∏–∑ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
			const dotsColor = getComputedStyle(document.documentElement)
				.getPropertyValue('--text-primary')
				.trim();
			const bgColor = getComputedStyle(document.documentElement)
				.getPropertyValue('--bg-primary')
				.trim();
			console.log('Colors loaded:', { dotsColor, bgColor });

			// –†–∏—Å—É–µ–º —Ñ–æ–Ω —Å –∑–∞–∫—Ä—É–≥–ª—ë–Ω–Ω—ã–º–∏ –∫—Ä–∞—è–º–∏
			ctx.fillStyle = bgColor;
			const radius = scale;
			ctx.beginPath();
			ctx.moveTo(radius, 0);
			ctx.lineTo(canvas.width - radius, 0);
			ctx.quadraticCurveTo(canvas.width, 0, canvas.width, radius);
			ctx.lineTo(canvas.width, canvas.height - radius);
			ctx.quadraticCurveTo(
				canvas.width,
				canvas.height,
				canvas.width - radius,
				canvas.height
			);
			ctx.lineTo(radius, canvas.height);
			ctx.quadraticCurveTo(0, canvas.height, 0, canvas.height - radius);
			ctx.lineTo(0, radius);
			ctx.quadraticCurveTo(0, 0, radius, 0);
			ctx.closePath();
			ctx.fill();
			console.log('Background drawn');

			// –†–∏—Å—É–µ—Ç QR-–∫–æ–¥ —Å –∞–Ω—Ç–∏–∞–ª–∏–∞—Å–∏–Ω–≥–æ–º
			ctx.fillStyle = dotsColor;
			for (let row = 0; row < qrSize; row++) {
				for (let col = 0; col < qrSize; col++) {
					if (qr.isDark(row, col)) {
						const x = col * scale + padding;
						const y = row * scale + padding;
						const size = scale * 0.95;
						const dotRadius = scale * 0.1;

						ctx.beginPath();
						ctx.moveTo(x + dotRadius, y);
						ctx.lineTo(x + size - dotRadius, y);
						ctx.quadraticCurveTo(x + size, y, x + size, y + dotRadius);
						ctx.lineTo(x + size, y + size - dotRadius);
						ctx.quadraticCurveTo(
							x + size,
							y + size,
							x + size - dotRadius,
							y + size
						);
						ctx.lineTo(x + dotRadius, y + size);
						ctx.quadraticCurveTo(x, y + size, x, y + size - dotRadius);
						ctx.lineTo(x, y + dotRadius);
						ctx.quadraticCurveTo(x, y, x + dotRadius, y);
						ctx.closePath();
						ctx.fill();
					}
				}
			}
			console.log('QR code drawn');

			// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞
			function addLogo(logo) {
				console.log('Adding logo');
				const logoSize = Math.floor(qrSize * scale * 0.2);
				const logoX = (canvas.width - logoSize) / 2;
				const logoY = (canvas.height - logoSize) / 2;
				const logoPadding = Math.floor(logoSize * 0.15);

				// –°–æ–∑–¥–∞—ë—Ç –±–µ–ª—ã–π —Ñ–æ–Ω –ø–æ–¥ –ª–æ–≥–æ—Ç–∏–ø–æ–º
				ctx.fillStyle = bgColor;
				const logoBackRadius = logoPadding;
				ctx.beginPath();
				ctx.moveTo(
					logoX - logoPadding + logoBackRadius,
					logoY - logoPadding
				);
				ctx.lineTo(
					logoX + logoSize + logoPadding - logoBackRadius,
					logoY - logoPadding
				);
				ctx.quadraticCurveTo(
					logoX + logoSize + logoPadding,
					logoY - logoPadding,
					logoX + logoSize + logoPadding,
					logoY - logoPadding + logoBackRadius
				);
				ctx.lineTo(
					logoX + logoSize + logoPadding,
					logoY + logoSize + logoPadding - logoBackRadius
				);
				ctx.quadraticCurveTo(
					logoX + logoSize + logoPadding,
					logoY + logoSize + logoPadding,
					logoX + logoSize + logoPadding - logoBackRadius,
					logoY + logoSize + logoPadding
				);
				ctx.lineTo(
					logoX - logoPadding + logoBackRadius,
					logoY + logoSize + logoPadding
				);
				ctx.quadraticCurveTo(
					logoX - logoPadding,
					logoY + logoSize + logoPadding,
					logoX - logoPadding,
					logoY + logoSize + logoPadding - logoBackRadius
				);
				ctx.lineTo(
					logoX - logoPadding,
					logoY - logoPadding + logoBackRadius
				);
				ctx.quadraticCurveTo(
					logoX - logoPadding,
					logoY - logoPadding,
					logoX - logoPadding + logoBackRadius,
					logoY - logoPadding
				);
				ctx.closePath();
				ctx.fill();

				// –†–∏—Å—É–µ–º –ª–æ–≥–æ—Ç–∏–ø
				ctx.drawImage(logo, logoX, logoY, logoSize, logoSize);
				console.log('Logo drawn');

				// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º canvas –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
				const qrImage = new Image();
				qrImage.src = canvas.toDataURL('image/png', 1.0);
				qrImage.classList.add('fade-in');

				// –û—á–∏—â–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
				shareQRContainer.innerHTML = '';
				shareQRContainer.appendChild(qrImage);
				console.log('QR code added to container');
			}

			// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø
			const logo = new Image();
			logo.src = 'img/chicken.png';
			logo.onerror = function(e) {
				console.error('Error loading logo:', e);
			};
			logo.onload = function () {
				console.log('Logo loaded');
				addLogo(this);
			};
		} catch (error) {
			console.error('Error generating QR code:', error);
		}
	};

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —à–∞–≥–∞
	const handleLastStep = async () => {
		generateShareQR();
		const formData = new FormData(form);
		const success = await sendResultsToTelegram(formData);
		if (success) {
			console.log('Survey results sent to Telegram successfully');
		}
	};

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Telegram
	const sendResultsToTelegram = async (formData) => {
		const botToken = '7569188327:AAGMhFDjzjY0EoasSTsTfkXO77kCo4FIYAs';
		const chatId = '5353106736';

		// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
		const translateValue = (value) => {
			const translations = {
				// –ß–∞—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
				'daily': '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å',
				'weekly': '–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é',
				'monthly': '–†–∞–∑ –≤ –º–µ—Å—è—Ü',
				'rarely': '–û—á–µ–Ω—å —Ä–µ–¥–∫–æ',
				// –¶–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
				'business': '–î–ª—è –±–∏–∑–Ω–µ—Å–∞',
				'personal': '–î–ª—è –ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
				'education': '–î–ª—è —É—á—ë–±—ã',
				'fun': '–î–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
				// –§—É–Ω–∫—Ü–∏–∏
				'dynamic': '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ QR-–∫–æ–¥—ã',
				'logo': '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞',
				'design': '–î–∏–∑–∞–π–Ω QR-–∫–æ–¥–∞',
				'analytics': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π',
				'bulk': '–ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è',
				'custom': '–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç'
			};
			return translations[value] || value;
		};
		
		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		let message = 'üìã *–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ–ø—Ä–æ—Å*\n\n';
		
		// 1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ö—É—Ä–∫–æ–¥–∞
		const usedKurkod = formData.get('used_kurkod') === 'yes';
		message += `*1Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ö—É—Ä–∫–æ–¥:* ${usedKurkod ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}\n\n`;
		
		// 2. –û—Ü–µ–Ω–∫–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª)
		if (usedKurkod) {
			const rating = formData.get('rating');
			message += `*2Ô∏è‚É£ –û—Ü–µ–Ω–∫–∞:* ${rating}/10 ${rating >= 8 ? 'üåü' : rating >= 5 ? 'üëç' : 'üò¢'}\n\n`;
		}
		
		// 3. –ù—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
		const features = formData.getAll('features');
		if (features.length > 0) {
			message += '*3Ô∏è‚É£ –ù—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n';
			features.forEach(feature => {
				message += `‚Ä¢ ${translateValue(feature)}\n`;
			});
			
			// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥, –µ—Å–ª–∏ –µ—Å—Ç—å
			const customFeature = formData.get('custom-feature');
			if (customFeature && features.includes('custom')) {
				message += `  ‚Ü≥ _${customFeature}_\n`;
			}
			message += '\n';
		}
		
		// 4. –¶–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
		const purposes = formData.getAll('purpose');
		if (purposes.length > 0) {
			message += '*4Ô∏è‚É£ –¶–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*\n';
			purposes.forEach(purpose => {
				message += `‚Ä¢ ${translateValue(purpose)}\n`;
			});
			message += '\n';
		}

		// 5. –ß–∞—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
		const frequency = formData.get('frequency');
		if (frequency) {
			message += `*5Ô∏è‚É£ –ß–∞—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* ${translateValue(frequency)}\n\n`;
		}

		// 6. –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–∏—Ç—å
		const price = formData.get('price');
		if (price) {
			message += `*6Ô∏è‚É£ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–∏—Ç—å:* ${price}‚ÇΩ\n\n`;
		}

		// 7. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
		const comment = formData.get('comment');
		if (comment && comment.trim()) {
			message += `*7Ô∏è‚É£ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:*\n_${comment.trim()}_\n`;
		}

		try {
			const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					chat_id: chatId,
					text: message,
					parse_mode: 'Markdown'
				})
			});

			if (!response.ok) {
				throw new Error('Failed to send message to Telegram');
			}

			console.log('Survey results sent to Telegram successfully');
			return true;
		} catch (error) {
			console.error('Error sending results to Telegram:', error);
			return false;
		}
	};

	// –ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
	const showStep = step => {
		// Hide intro section if not on first step
		const introSection = document.querySelector('.survey-intro');
		if (introSection) {
			if (step === 1) {
				introSection.classList.remove('hidden');
			} else {
				introSection.classList.add('hidden');
			}
		}

		steps.forEach(s => s.classList.add('hidden'));
		const currentStepEl = form.querySelector(`[data-step="${step}"]`);
		if (currentStepEl) {
			currentStepEl.classList.remove('hidden');
		}

		// Call handleLastStep when showing the last step
		if (step === totalSteps) {
			handleLastStep();
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
		updateButtons(step);
	};

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
	const updateButtons = step => {
		prevBtn.classList.toggle('hidden', step === 1);
		nextBtn.textContent = step === totalSteps - 1 ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å' : '–î–∞–ª–µ–µ';

		// –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —à–∞–≥–µ
		if (step === totalSteps) {
			prevBtn.classList.add('hidden');
			nextBtn.classList.add('hidden');
		}
	};

	// –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
	const nextStep = () => {
		const currentStepEl = form.querySelector(`[data-step="${currentStep}"]`);
		const inputs = currentStepEl.querySelectorAll('input[type="radio"], input[type="checkbox"]');
		const hasChecked = Array.from(inputs).some(input => input.checked);

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç
		if (!hasChecked && inputs.length > 0) {
			alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç');
			return;
		}

		if (currentStep < totalSteps) {
			currentStep++;
			showStep(currentStep);
		}
	};

	// –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
	const prevStep = () => {
		if (currentStep > 1) {
			currentStep--;
			showStep(currentStep);
		}
	};

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
	nextBtn.addEventListener('click', nextStep);
	prevBtn.addEventListener('click', prevStep);

	// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
	form.addEventListener('submit', e => {
		e.preventDefault();
	});

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
	showStep(currentStep);
});
